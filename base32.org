# -*- coding: utf-8; mode: org-development-elisp; -*-
#+title: base32
#+subtitle: Base32 encoding in Emacs Lisp
#+author: =#<PERSON akater A24961DE3ADD04E057ADCF4599555CE6F2E1B21D>=
#+property: header-args :tangle base32.el :lexical t
#+startup: nologdone show2levels
#+todo: TODO(t@) HOLD(h@/!) | DONE(d@)
#+todo: BUG(b@/!) | FIXED(x@)
#+todo: TEST(u) TEST-FAILED(f) | TEST-PASSED(p)
#+todo: DEPRECATED(r@) | OBSOLETE(o@)

This is a port of =cl-base32= by Phil Hargett.

[[http://tools.ietf.org/html/rfc4648][Base32 encoding]] (IETF)

* Overview
** TEST-PASSED Make base32 string from bytes
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32-from-bytes [-32 -31 -30 -29 -28 -27 -26 -25 -24 -23])
#+end_src

#+EXPECTED:
#+begin_example elisp
"4dq6fy7e4xtop2hj"
#+end_example

** TEST-PASSED Use upper case
#+begin_src elisp :tangle no :results code :wrap example elisp
(with-base32-upcase
  (base32-from-bytes [-32 -31 -30 -29 -28 -27 -26 -25 -24 -23]))
#+end_src

#+EXPECTED:
#+begin_example elisp
"4DQ6FY7E4XTOP2HJ"
#+end_example

** TEST-PASSED A 20-bytes array
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32-from-bytes
 [60 61 62 63 64 -63 -62 -61 -60 77 78 -77 -78 125 -125 0 1 2 3 4])
#+end_src

#+EXPECTED:
#+begin_example elisp
"hq6t4p2ayhbmhrcnj2z3e7mdaaaqeaye"
#+end_example

** TEST-PASSED Bytes are modulo 256
#+begin_src elisp :tangle no :results code :wrap example elisp
(string-equal
 (base32-from-bytes [-32 -31 -30 -29 -28 -27 -26 -25 -24 -23])
 (base32-from-bytes [224 225 226 227 228 229 230 231 232 233]))
#+end_src

#+EXPECTED:
#+begin_example elisp
t
#+end_example

** TEST-PASSED Convert base32 string to bytes
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32-to-bytes "4dq6fy7e4xtop2hj")
#+end_src

#+EXPECTED:
#+begin_example elisp
[224 225 226 227 228 229 230 231 232 233]
#+end_example

* Installation
** Gentoo
Add the ebuild repository and install from there:
#+begin_src sh :dir /sudo::/ :tangle no :results none
eselect repository enable akater
emerge app-emacs/base32
#+end_src

** Other systems
*** Install dependencies
Ensure the following dependency is installed:
- [[https://framagit.org/akater/elisp-cl-bytes][cl-bytes]]

*** Use ~package-vc~ (Emacs 29 and later)…
#+begin_src elisp :tangle no :results none
(package-vc-install
 '( base32
    :url "https://framagit.org/akater/elisp-base32"
    :branch "elpa-release"))
#+end_src

*** …or install manually
Clone ~base32~, switch to =release= branch.

~base32~ can be installed into system-wide directory =/usr/share/emacs/site-lisp= (or wherever your ~SITELISP~ envvar points to) with
#+begin_src sh :tangle no :results none
make && sudo make install
#+end_src
but it's best to define a package for your package manager to do this instead.

If your package manager can't do that, and you don't want to install with elevated permissions, do
#+begin_src sh :tangle no :results none
SITELISP=~/.config/emacs/lisp SITEETC=~/.config/emacs/etc make && \
DESTDIR=~/.config/emacs SITELISP=/lisp SITEETC=/etc make install
#+end_src
(you may simply eval this block with =C-c C-c=; it won't be informative if it fails but hopefully it'll work)

In any case, you'll have to add load-path to your config, as demonstrated in [[Suggested config]].

The dependency should be installed into versionless directory because our Makefile presumes it is versionless.  ~package-vc~ does install it this way; if you don't use it, you're on your own.

** Notes for contiributors
If you have a local version of repository, compile with
#+begin_example sh :tangle no :results none
ORG_LOCAL_SOURCES_DIRECTORY="/home/contributor/src/elisp-base32"
#+end_example

This will link function definitions to your local Org files.

** Tests
If you want to run tests for ~base32~, ensure the following dependencies are installed:
- [[https://framagit.org/akater/org-run-tests][ORT]]

* Suggested config
#+begin_example elisp
(use-package base32 :ensure nil :defer t
  ;; Note: on Gentoo, or when using `package-vc',
  ;; there is no need to specify load-path
  :load-path "/usr/share/emacs/site-lisp/base32"
  ;; or maybe
  ;; :load-path "~/.config/emacs/lisp/base32"
  )
#+end_example

* Dependencies
** Runtime and build-time dependencies
#+begin_src elisp :results none
(eval-when-compile (require 'cl-macs))
(require 'cl-bytes)
#+end_src

** Misc deps
#+begin_src elisp :results none
(defalias 'cl-char 'aref)
(defalias 'cl-char-code 'identity)
(defalias 'cl-char<= '<=)
#+end_src

* Encoding digits
#+begin_src elisp :results none
(defvar base32-alphabet "abcdefghijklmnopqrstuvwxyz234567")
#+end_src

#+begin_src elisp :results none
(defun base32--encode-word (a-word)
  "Return the digit in the base32 alphabet corresponding to a word A-WORD."
  (cl-char base32-alphabet a-word))
#+end_src

#+begin_src elisp :results none
(defun base32--decode-word (a-digit)
  "Return the word encoded as a digit A-DIGIT in the base32 alphabet."
  (let ((code (cl-char-code a-digit)))
    (cond
     ((cl-char<= ?a a-digit ?z)
      (- code (cl-char-code ?a)))
     ((cl-char<= ?2 a-digit ?7)
      (+ 26 (- code (cl-char-code ?2))))
     ;; upper case
     ((cl-char<= ?A a-digit ?Z)
      (- code (cl-char-code ?A))))))
#+end_src

#+begin_src elisp :results none
(defmacro with-base32-upcase (&rest body)
  (declare (indent 0))
  `(let ((base32-alphabet (upcase base32-alphabet)))
     ,@body))
#+end_src

* Read, write
#+begin_src elisp :results none
(defun base32--read-word (some-bytes word-index)
  "Return the word (a 5-bit integer) found in SOME-BYTES located at WORD-INDEX."
  (let* ((bytes-length (length some-bytes))
	 ;; don't be confused : bit indexes aren't really pointing to
	 ;; the bit as understood by Lisp--they are more virtual in nature,
	 ;; which assumes that bit 0 is the MSB rather than bit 8 being MSB
         (start-bit-index (* 5 word-index))
         (end-bit-index (+ 4 start-bit-index))
         (part1-byte-index (floor start-bit-index 8)) 
         (part2-byte-index (floor end-bit-index 8))
         (part1-size (min 5 (- 8 (mod start-bit-index 8))))
         (part2-size (- 5 part1-size))
	 ;; here we translate the bit indexes so that the MSB is bit 8
	 ;; and the LSB is bit 0
         (source-part1 (cl-byte part1-size 
                                (- (- 8 (mod start-bit-index 8)) part1-size)))
         (source-part2 (cl-byte part2-size 
                                (- (- 8 (mod end-bit-index 8)) 1)))
	 ;; becomes the upper bits in value
         (dest-part1 (cl-byte part1-size part2-size)) 
	 ;; becomes the lower bits in value
         (dest-part2 (cl-byte part2-size 0)) 
         (value 0))
    
    (setf (cl-ldb dest-part1 value)
          (cl-ldb source-part1 (aref some-bytes part1-byte-index)))
    (cond
     ((>= part1-byte-index bytes-length)
      (setq value 0))
     ((<= part2-byte-index part1-byte-index))
     ((< part2-byte-index (length some-bytes))
      (setf (cl-ldb dest-part2 value)
            (cl-ldb source-part2 (aref some-bytes part2-byte-index))))
     (t
      (setf (cl-ldb dest-part2 value) 0)))
    value))
#+end_src

#+begin_src elisp :results none
(defun base32--write-word (some-bytes word-index word)
  "Write the WORD into the bits located at WORD-INDEX in SOME-BYTES."
  (let* ((bytes-length (length some-bytes))
         ;; don't be confused : bit indexes aren't really pointing to
         ;; the bit as understood by Lisp--they are more virtual in nature,
         ;; which assumes that bit 0 is the MSB rather than bit 8 being MSB
         (start-bit-index (* 5 word-index))
         (end-bit-index (+ 4 start-bit-index))
         (part1-byte-index (floor start-bit-index 8)) 
         (part2-byte-index (floor end-bit-index 8))
         (part1-size (min 5 (- 8 (mod start-bit-index 8))))
         (part2-size (- 5 part1-size))
	 ;; here we translate the bit indexes so that the MSB is bit 8
	 ;; and the LSB is bit 0
         (dest-part1 (cl-byte part1-size 
                              (- (- 8 (mod start-bit-index 8)) part1-size)))
         (dest-part2 (cl-byte part2-size 
                              (- (- 8 (mod end-bit-index 8)) 1) ))
	 ;; becomes the upper bits in value
         (source-part1 (cl-byte part1-size part2-size)) 
	 ;; becomes the lower bits in value
         (source-part2 (cl-byte part2-size 0))   
         (part1-byte (aref some-bytes part1-byte-index))
         (part2-byte (when (and (< part2-byte-index bytes-length)
                                (> part2-size 0)) 
                       (aref some-bytes part2-byte-index))))
    (setf (cl-ldb dest-part1 part1-byte)
          (cl-ldb source-part1 word))
    (when part2-byte
      (setf (cl-ldb dest-part2 part2-byte)
            (cl-ldb source-part2 word)))    
    (setf (aref some-bytes part1-byte-index) part1-byte)
    (when part2-byte
      (setf (aref some-bytes part2-byte-index) part2-byte))))
#+end_src

* Lengths
** unpadded-length
*** Notes
This is not used, is buggy in the original implementation, and the semantics is unclear to me.  I nevertheless leave the code here.

*** Examples
**** Basic Examples
***** TEST-PASSED The length sans padding
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32--unpadded-length "4dq6fy7e4xtop2hj====")
#+end_src

#+EXPECTED:
#+begin_example elisp
16
#+end_example

**** Possible Issues
***** TEST-PASSED The argument type is unclear
I just don't know if it's considered a base32 string.
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32--unpadded-length "===")
#+end_src

#+EXPECTED:
#+begin_example elisp
0
#+end_example

** Dependencies
#+begin_src elisp :results none
(require 'cl-seq)
#+end_src

** Definition
#+begin_src elisp :results none
(defun base32--unpadded-length (base32-string)
  "Given a BASE32-STRING, return the size of the raw string, without any = padding."
  (1+ (or (cl-position ?= base32-string :from-end t :test-not #'char-equal)
          -1)))
#+end_src

** byte-length
#+begin_src elisp :results none
(defun base32-byte-length (base32-string)
  "Given a BASE32-STRING, compute the number of bytes in the decoded data."
  (let* ((padded-length (length base32-string))
         (unpadded-length padded-length)
         (padding 0)
         (block-count (ceiling padded-length 8)))
    (if (<= padded-length 0)
        0
      (dotimes (i padded-length)
        (when (char-equal ?= (aref base32-string (- padded-length i 1)))
          (cl-decf unpadded-length)
          (cl-incf padding)))
      (- (* 5 block-count)
         (cl-ecase padding
	   (0 0)
	   (6 4)
	   (4 3)
	   (3 2)
	   (1 1))))))
#+end_src

#+begin_src elisp :results none
(defun base32-length-from-bytes (some-bytes)
  "Determine the length of the base32-encoded string corresponding to SOME-BYTES."
  (let* ((word-count (ceiling (* 8 (length some-bytes)) 5) )
         (digit-count (* 8 (ceiling word-count 8))))
    (cl-values digit-count word-count)))
#+end_src

* Converters
** From bytes
#+begin_src elisp :results none
(defun base32-from-bytes (some-bytes)
  "Return a base32 string encoding of the provided vector of SOME-BYTES."
  (let* ((word-count (ceiling (* 8 (length some-bytes)) 5))
         (digit-count (* 8 (ceiling word-count 8)))
         (base32-string (make-string digit-count ?=)))
    (dotimes (i word-count)
      (setf (aref base32-string i)
            (base32--encode-word (base32--read-word some-bytes i))))
    base32-string))
#+end_src

** To bytes
*** Examples
**** Possible Issues
***** TEST-PASSED No type checking is done
#+begin_src elisp :tangle no :results code :wrap example elisp
(base32-to-bytes "1")
#+end_src

#+EXPECTED:
#+begin_example elisp
[0 0 0 0 0]
#+end_example

*** Definition
#+begin_src elisp :results none
(defun base32-to-bytes (base32-string)
  "Return the bytes decoded from the supplied BASE32-STRING."
  (let* ((byte-count (base32-byte-length base32-string))
         (base32-bytes (make-vector byte-count
                                    ;; :element-type '(unsigned-byte 8) 
                                    0)))
    (cl-dotimes (i (length base32-string))
      (let ((word (base32--decode-word (aref base32-string i))))
        (if word
            (base32--write-word base32-bytes i word)
          (cl-return))))
    base32-bytes))
#+end_src
